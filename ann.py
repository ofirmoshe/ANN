from typing import List, Tuple
import numpy as np


class ANN:

    @staticmethod
    def initialize_parameters(layer_dims: List[int]) -> dict:
        """
        :param layer_dims: an array of the dimensions of each layer in the network (layer 0 is the size of the flattened input,
        layer L is the output
        softmax)
        :return: a dictionary containing the initialized W and b parameters of each layer (W1…WL, b1…bL).
        """

        init_w_d = {}
        for idx, dim in enumerate(layer_dims):
            curr_w_b = np.random.rand(2, dim)
            init_w_d[idx] = curr_w_b
        return init_w_d

    @staticmethod
    def linear_forward(A: np.array, W: np.array, b: np.array) -> Tuple[np.array, dict]:
        """
        Implement the linear part of a layer's forward propagation.
        :param A: the activations of the previous layer
        :param W: the weight matrix of the current layer (of shape [size of current layer, size of previous layer])
        :param b: the bias vector of the current layer (of shape [size of current layer, 1])
        :return: Z – the linear component of the activation function (i.e., the value before applying the non-linear function)
        linear_cache – a dictionary containing A, W, b (stored for making the backpropagation easier to compute)
        """
        # e.g: two inputs x1, x2 = 1 ,2
        # 3 biases = b1, b2, b3 = 10, 11, 12
        # 3 nodes in next layer z1 = w1,1 * x1 + w2,1 * x2 + b1
        # z2 = w1,2 * x1 + w2,2 * x2 + b2
        # z3 = w1,3 * x1 + w2,3 * x2 + b3
        # wT * X + B =
        # |  1  2  |   |  1  |      |  10 |
        # |  3  4  |   |  2  |  +   |  10 |
        # |  5  6  |                |  10 |
        # since dimensions of w are [size of current layer, size of previous layer] then we get already wT
        # e.g: x = np.array([1,2]
        # w = np.array([[1, 3, 5], [2,4,6]]).transpose()
        # b = np.array([[10, 11, 12]])
        return np.matmul(W, A) + b, {'A': A, 'W': W, 'b': b}

    @staticmethod
    def softmax(Z: np.array) -> Tuple[np.array, np.array]:
        """
        :param Z: the linear component of the activation function
        :return: – the activations of the layer.
        activation_cache – returns Z, which will be useful for the backpropagation
        """
        return np.exp(Z) / np.sum(np.exp(Z), axis=0), Z

    @staticmethod
    def relu(Z: np.array) -> Tuple[np.array, np.array]:
        """
        :param Z: the linear component of the activation function
        :return: A – the activations of the layer
        activation_cache – returns Z, which will be useful for the backpropagation
        """
        return np.maximum(0, Z), Z

    def linear_activation_forward(self, A_prev, W, B, activation: str):
        """
        Implement the forward propagation for the LINEAR->ACTIVATION layer
        :param A_prev: activations of the previous layer
        :param W: the weights matrix of the current layer
        :param B: the bias vector of the current layer
        :param activation: the activation function to be used (a string, either “softmax” or “relu”)
        :return: A – the activations of the current layer
        cache – a joint dictionary containing both linear_cache and activation_cache
        """

        z, linear_cache = self.linear_forward(A=A_prev, W=W, b=B)
        if activation == 'softmax':
            a, activation_cache = self.softmax(Z=z)
        elif activation == 'relu':
            a, activation_cache = self.relu(Z=z)
        else:
            raise KeyError(f"ERROR: wrong activation function - {activation}, please use 'relu' or 'softmax'")
        return a, {'activation_cache': activation_cache, 'linear_cache': linear_cache}

    def L_model_forward(self, X, parameters, use_batchnorm: bool):
        """
        Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SOFTMAX computation
        :param X: the data, numpy array of shape (input size, number of examples)
        :param parameters: the initialized W and b parameters of each layer
        :param use_batchnorm: a boolean flag used to determine whether to apply batchnorm after the activation (note that this option needs to be set
        to “false” in Section 3 and “true” in Section 4)
        :return: AL – the last post-activation value
        caches – a list of all the cache objects generated by the linear_forward function
        """
        L = int(len(parameters.keys()) / 2)
        cache = list()
        A_prev = X
        for layer_idx in range(1, L):
            A_prev, curr_cache = self.linear_activation_forward(A_prev=A_prev, W=parameters[f"W{layer_idx}"],
                                                                B=parameters[f"b{layer_idx}"], activation="relu")
            cache.append(curr_cache)
            if use_batchnorm:
                pass
        AL, curr_cache = self.linear_activation_forward(A_prev=A_prev, W=parameters[f"W{L}"],
                                                        B=parameters[f"b{L}"], activation="softmax")
        cache.append(curr_cache)
        return AL, cache

    @staticmethod
    def compute_cost(AL, Y):
        """
        Implement the cost function defined by equation. The requested cost function is categorical cross-entropy loss. The formula is as follows:
        cost=-1/m*∑_1^m▒∑_1^C▒〖y_i  log⁡〖(y ̂)〗 〗, where y_i is one for the true class (“ground-truth”) and y ̂ is the softmax-adjusted prediction
        (this link provides a good overview).
        :param AL: probability vector corresponding to your label predictions, shape (num_of_classes, number of examples)
        :param Y: the labels vector (i.e. the ground truth)
        :return: cost – the cross-entropy cost
        """
        m = AL.shape[-1]
        return np.sum(Y * np.log2(AL)) / -m

    @staticmethod
    def apply_batchnorm(A):
        """
        performs batchnorm on the received activation values of a given layer
        :param A: the activation values of a given layer
        :return: NA - the normalized activation values, based on the formula learned in class
        """
        eps = 1e-8
        mean = np.mean(A, axis=0)
        var = np.sum((A-mean) ** 2, axis=0) / A.shape[-1]
        NA = (A - mean) / (np.sqrt(var + eps))
        # What about the learnable parameters?
        return NA

    def Linear_backward(dZ, cache):
        """
        Implements the linear part of the backward propagation process for a single layer
        :param dZ: the gradient of the cost with respect to the linear output of the current layer (layer l)
        :param cache: tuple of values (A_prev, W, b) coming from the forward propagation in the current layer
        :return: dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
        dW -- Gradient of the cost with respect to W (current layer l), same shape as W
        db -- Gradient of the cost with respect to b (current layer l), same shape as b
        """
        prev_A, W, b = cache
        dW = np.matmul(dZ, prev_A.transpose())
        db = dZ
        # TODO: dA_prev

    @staticmethod
    def linear_activation_backward(dA, cache, activation):
        """
        Implements the backward propagation for the LINEAR->ACTIVATION layer. The function first computes dZ and then applies the linear_backward
        function.
        Some comments:
             - The derivative of ReLU is f^' (x)={■(1&if x>0@0&otherwise)┤
             - The derivative of the softmax function is: p_i-y_i, where p_i is the softmax-adjusted probability of the class and y_i is the
             “ground truth” (i.e. 1 for the real class, 0 for all others)
             - You should use the activations cache created earlier for the calculation of the activation derivative and the linear cache should be
             fed to the linear_backward function

        :param dA: post activation gradient of the current layer
        :param cache: contains both the linear cache and the activations cache
        :param activation: # TOOD: missing
        :return: dA_prev – Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
        dW – Gradient of the cost with respect to W (current layer l), same shape as W
        db – Gradient of the cost with respect to b (current layer l), same shape as b
        """
        raise NotImplementedError

    @staticmethod
    def relu_backward (dA, activation_cache):
        """
        Implements backward propagation for a ReLU unit
        :param dA: the post-activation gradient
        :param activation_cache: contains Z (stored during the forward propagation)
        :return: dZ – gradient of the cost with respect to Z
        """
        raise NotImplementedError

    @staticmethod
    def softmax_backward (dA, activation_cache):
        """
        Implements backward propagation for a softmax unit
        :param dA: the post-activation gradient
        :param activation_cache: contains Z (stored during the forward propagation)
        :return: dZ – gradient of the cost with respect to Z
        """
        raise NotImplementedError

    @staticmethod
    def L_model_backward(AL, Y, caches):
        """
        Implement the backward propagation process for the entire network
        Some comments:
        the backpropagation for the softmax function should be done only once as only the output layers uses it and the RELU should be done
        iteratively over all the remaining layers of the network.
        :param AL: the probabilities vector, the output of the forward propagation (L_model_forward)
        :param Y: the true labels vector (the "ground truth" - true classifications)
        :param caches: list of caches containing for each layer: a) the linear cache; b) the activation cache
        :return:
            Grads - a dictionary with the gradients
                 grads["dA" + str(l)] = ...
                 grads["dW" + str(l)] = ...
                 grads["db" + str(l)] = ...
        """
        raise NotImplementedError

    @staticmethod
    def Update_parameters(parameters: dict, grads: dict, learning_rate: float):
        """
        Updates parameters using gradient descent
        :param parameters: a python dictionary containing the DNN architecture’s parameters
        :param grads: a python dictionary containing the gradients (generated by L_model_backward)
        :param learning_rate: the learning rate used to update the parameters (the “alpha”)
        :return: parameters – the updated values of the parameters object provided as input
        """
        raise NotImplementedError

    # TODO question 3:

    @staticmethod
    def L_layer_model(X, Y, layers_dims, learning_rate, num_iterations, batch_size):
        """
        Implements a L-layer neural network. All layers but the last should have the ReLU activation function, and the final layer will apply the
        softmax activation function. The size of the output layer should be equal to the number of labels in the data. Please select a batch size
        that enables your code to run well (i.e. no memory overflows while still running relatively fast).

        Hint: the function should use the earlier functions in the following order: initialize -> L_model_forward -> compute_cost ->
        L_model_backward -> update parameters

        :param X: the input data, a numpy array of shape (height*width , number_of_examples)
                Comment: since the input is in grayscale we only have height and width, otherwise it would have been height*width*3
        :param Y: the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
        :param layers_dims: a list containing the dimensions of each layer, including the input
        :param learning_rate:
        :param num_iterations:
        :param batch_size: the number of examples in a single training batch
        :return:
        parameters – the parameters learnt by the system during the training (the same parameters that were updated in the update_parameters function).
        costs – the values of the cost function (calculated by the compute_cost function). One value is to be saved after each 100 training
        iterations (e.g. 3000 iterations -> 30 values)
        """
        raise NotImplementedError

    @staticmethod
    def Predict(X, Y, parameters):
        """
        The function receives an input data and the true labels and calculates the accuracy of the trained neural network on the data
        :param X: the input data, a numpy array of shape (height*width, number_of_examples)
        :param Y: the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
        :param parameters: a python dictionary containing the DNN architecture’s parameters
        :return: accuracy – the accuracy measure of the neural net on the provided data (i.e. the percentage of the samples for which the correct
        label receives the highest confidence score). Use the softmax function to normalize the output values.
        """
        raise NotImplementedError



